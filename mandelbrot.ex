defmodule PPM do

  # write(name, image) The image is a list of rows, each row a list of
  # tuples {R,G,B}. The RGB values are 0-255.

  def write(name, image) do
    height = length(image)
    width = length(List.first(image))
    {:ok, fd} = File.open(name, [:write])
    IO.puts(fd, "P6")
    IO.puts(fd, "#generated by ppm.ex")
    IO.puts(fd, "#{width} #{height}")
    IO.puts(fd, "255")
    rows(image, fd)
    File.close(fd)
  end

  defp rows(rows, fd) do
    Enum.each(rows, fn(r) ->
      colors = row(r)
      IO.write(fd, colors)
    end)
  end

  defp row(row) do
    List.foldr(row, [], fn({:rgb, r, g, b}, a) ->
      [r, g, b | a]
    end)
  end

end

# code not written by Isac Ljungberg above

# all code written by Isac Ljungberg below

defmodule Cmplx do
  def new(r, i) do {r, i} end

  def add({ar, ai}, {br, bi}) do
    {ar + br, ai + bi}
  end

  def sqr({r, i}) do
    {r*r - i*i, 2*r*i}
  end

  def abs({r, i}) do
    :math.sqrt(r*r + i*i)
  end
end

defmodule Brot do
  def mandelbrot({r, i}, m) do
    #IO.inspect({r, i})
    {valr, vali} = Cmplx.add({0,0}, {r, i})
    case vali*vali+valr*valr>4 do
    #case Cmplx.abs({valr, vali})>2 do
      :true -> 1

      :false -> mandelbrotRecurse({valr, vali}, {r, i}, 2, m)
    end
  end

  def mandelbrotRecurse(_, {_, _}, m, m) do 0 end

  def mandelbrotRecurse(acc, {r, i}, n, m) do
    #IO.inspect(acc)
    {vali, valr} = Cmplx.add(Cmplx.sqr(acc), {r,i})
    case vali*vali+valr*valr>4 do
    #case Cmplx.abs({valr, vali})>2 do
      :true -> n

      :false -> mandelbrotRecurse({vali, valr}, {r, i}, n+1, m)
    end
  end
end

defmodule Color do
  def convert1(depth, max) do
    {:rgb,
    #round(250*depth/max),
    100,
    round(250*(max-depth)/max),
    round(100*depth/max)}
  end

  def convert2(depth, max) do
    {:rgb,
    round(250*depth/max),
    0,
    0}
  end

  def convert3(depth, max) do
    {:rgb,
    0,
    round(250*depth/max),
    0}
  end

  def convert4(depth, max) do
    {:rgb,
    0,
    0,
    round(250*depth/max)}
  end
end

defmodule Mandel do
  def mandelbrot(xMax, yMax, x0, y0, k, depth) do
    trans = fn(x, y) ->
      Cmplx.new(x0 + k * x, y0 - k * y)
    end
    rows(xMax, yMax, 0, trans, depth)
  end

  def rows(_, yMax, yMax, _, _) do [] end

  def rows(xMax, yMax, y, trans, depth) do
    [row(xMax, 0, y, trans, depth)|rows(xMax, yMax, y-1, trans, depth)]
  end

  def row(xMax, xMax, _, _, _) do [] end

  def row(xMax, x, y, trans, depth) do
    [Color.convert2(Brot.mandelbrot(trans.(x, y), depth), depth)
      |row(xMax, x+1, y, trans, depth)]
  end
end

PPM.write("mandelbrotSeries1.ppm",
  Mandel.mandelbrot(1125*4, -1125*4,-2.3,-0.6, 0.001/4,30))
PPM.write("mandelbrotSeries2.ppm",
  Mandel.mandelbrot(1125*4, -1125*4,-2.0,-0.35, 0.0005/4,40))
PPM.write("mandelbrotSeries3.ppm",
  Mandel.mandelbrot(1125*4, -1125*4,-1.85,-0.08, 0.000125/4,50))
PPM.write("mandelbrotSeries4.ppm",
  Mandel.mandelbrot(1125*4, -1125*4,-1.79,-0.025, 0.00003125/4,60))
